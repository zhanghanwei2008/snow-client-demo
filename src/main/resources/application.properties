## 应用名称
spring.application.name = spring-snow-eureka-client

## 客户端 端口随即可用
server.port = 20000

## 管理安全失效
management.security.enabled = false


### 服务提供方主机
serivce-provider.host = localhost
### 服务提供方端口
serivce-provider.port = 9090


## 配置连接 Eureka 服务器
## 配置多个 Eureka 注册中心，以"," 分割
eureka.client.serviceUrl.defaultZone = \
  http://172.16.236.10/eureka

#  http://192.168.31.106:20001/eureka,\
#  http://192.168.31.106:20000/eureka,\

eureka.client.enabled=true

service-provider.name=spring-snow-service-provider

### 配置ribbon 服务地提供方
#spring-snow-service-provider.ribbon.listOfServers = \
#  http://${serivce-provider.host}:${serivce-provider.port}


spring-snow-service-provider.ribbon.NFLoadBalancerRoleClassName=com.netflix.loadbalancer.RandomRule


#zookeeper 注册中心服务器
#spring.cloud.zookeeper.discovery.root=${spring.application.name}
spring.cloud.zookeeper.enabled=false
spring.cloud.zookeeper.connect-string=192.168.31.106:2181
spring.cloud.zookeeper.max-sleep-ms=50
spring.cloud.zookeeper.block-until-connected-wait=5
#spring.cloud.zookeeper.discovery.register=true
#spring.cloud.zookeeper.dependencies.spring-snow-service-provider.required=true
#spring.cloud.zookeeper.dependencies.spring-snow-service-provider.path=/spring-snow-service-provider
#spring.cloud.zookeeper.dependencies.spring-snow-service-provider.loadBalancerType=ROUND_ROBIN

##分布式状态跟踪zipkin Web方式
#zipkin.server.host = localhost
#zipkin.server.port = 19411
#spring.zipkin.base-url = http://${zipkin.server.host}:${zipkin.server.port}

#配置zipkin发送类型为kafka
spring.zipkin.sender.type=kafka
spring.kafka.bootstrap-servers=192.168.31.106:9093
#kafka主题，不配置时默认使用zipkin
spring.zipkin.kafka.topic=zipkin
#设置服务名，不设置默认使用spring.application.name
#spring.zipkin.service.name=gateway
#采样率设置
spring.sleuth.sampler.probability=1.0

#feign 日志
logging.level.com.npcgo.snowclientdemo.service.UserApiService=debug

feign.hystrix.enabled=true


#
#hystrix.command.UserApiService#getString(User).execution.isolation.thread.timeoutInMilliseconds=1000
#hystrix.command.UserApiService#getString(User).circuitBreaker.enabled=true
#hystrix.command.UserApiService#getString(User).circuitBreaker.forceOpen=false